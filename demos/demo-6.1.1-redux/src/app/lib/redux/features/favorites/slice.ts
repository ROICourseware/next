import { createSlice } from "@reduxjs/toolkit";
import type { PayloadAction } from "@reduxjs/toolkit";
import { Book } from "@/app/lib/models/book";

// Define the shape of the favorites state
interface FavoritesState {
  value: Book[];
  status: string;
  error: string | null;
}

// Initial state for the favorites slice
const initialState: FavoritesState = {
  value: [],
  status: 'empty',
  error: null,
};

// Create the favorites slice
const slice = createSlice({
  name: "favorites",
  initialState: initialState,
  reducers: {
    // Action to set the status to 'loading' when initializing favorites
    initializeFavoritesStart: (state) => {
      state.status = 'loading';
    },
    // Action to set the favorites and status to 'succeeded' when initialization is successful
    initializeFavoritesSuccess: (state, action: PayloadAction<Book[]>) => {
      state.value = action.payload;
      state.status = 'succeeded';
    },
    // Action to set the status to 'failed' and store the error message when initialization fails
    initializeFavoritesFailure: (state, action: PayloadAction<string>) => {
      state.status = 'failed';
      state.error = action.payload;
    },
    // Action to set the status to 'loading' when adding a favorite
    addFavoriteStart: (state) => {
      state.status = 'loading';
    },
    // Action to add a favorite and set the status to 'succeeded' when adding is successful
    addFavoriteSuccess: (state, action: PayloadAction<Book>) => {
      state.value = [...state.value, action.payload];
      state.status = 'succeeded';
    },
    // Action to set the status to 'failed' and store the error message when adding fails
    addFavoriteFailure: (state, action: PayloadAction<string>) => {
      state.status = 'failed';
      state.error = action.payload;
    },
    // Action to set the status to 'loading' when deleting a favorite
    deleteFavoriteStart: (state) => {
      state.status = 'loading';
    },
    // Action to remove a favorite and set the status to 'succeeded' when deleting is successful
    deleteFavoriteSuccess: (state, action: PayloadAction<Book>) => {
      state.value = state.value.filter(x => x.id !== action.payload.id);
      state.status = 'succeeded';
    },
    // Action to set the status to 'failed' and store the error message when deleting fails
    deleteFavoriteFailure: (state, action: PayloadAction<string>) => {
      state.status = 'failed';
      state.error = action.payload;
    },
  },
});

// Export the actions generated by createSlice
export const {
  initializeFavoritesStart,
  initializeFavoritesSuccess,
  initializeFavoritesFailure,
  addFavoriteStart,
  addFavoriteSuccess,
  addFavoriteFailure,
  deleteFavoriteStart,
  deleteFavoriteSuccess,
  deleteFavoriteFailure,
} = slice.actions;

// Export the reducer generated by createSlice
export default slice.reducer;